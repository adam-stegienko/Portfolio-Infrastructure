name: 'Terraform'

on:
  push:
    branches:
      - main

jobs:
  terraform:
    env:
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
      PRINCIPAL_ID: ${{ secrets.PRINCIPAL_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      SECRET_CLIENT_ID: ${{ secrets.SECRET_CLIENT_ID }}
      SECRET_CLIENT_SECRET: ${{ secrets.SECRET_CLIENT_SECRET }}
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: SCM Checkout
      uses: actions/checkout@v3

    - name: Git Config Init
      run: |
        git config --global url."https://oauth2:${{ env.GITHUB_TOKEN }}@github.com".insteadOf ssh://git@github.com

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ env.AZURE_CREDENTIALS }}'

    - name: Terraform environmental (prod) values given
      run: |
        cat << EOT > prod.tfvars
        service_principal = {
          subscription_id = "${{ env.ARM_SUBSCRIPTION_ID }}"
          tenant_id       = "${{ env.ARM_TENANT_ID }}"
          client_id       = "${{ env.ARM_CLIENT_ID }}"
          client_secret   = "${{ env.ARM_CLIENT_SECRET }}"
          principal_id    = "${{ env.PRINCIPAL_ID }}"
        }

        resource_group = {
          location = "West Europe"
          name     = "portfolio-develeap"
          id       = "/subscriptions/5aca752c-8d85-4445-bf68-d30c9eddc5d8/resourceGroups/portfolio-develeap"
        }

        cluster_name = "adam-prod"
        dns_prefix   = "adam-prod"

        tags = {
          environment = "prod"
          created_by  = "Adam Stegienko"
        }

        node_pool = {
          name       = ["pool1", "pool2", "pool3"]
          vm_size    = "Standard_D2_v2"
          node_count = 1
        }

        admin_username = "ubuntu"
        ssh_public_key = "${{ env.AZURE_SSH_KEY }}"

        network_profile = {
          network_plugin     = "azure"
          load_balancer_sku  = "standard"
          dns_service_ip     = "22.0.7.111"
          docker_bridge_cidr = "22.0.7.0/20"
          service_cidr       = "22.0.7.0/24"
        }

        
        vnet = {
          name           = "adam-prod-vnet"
          address_prefix = "14.0.0.0/16"
        }

        subnets = {
          name           = ["adam-prod-subnet1", "adam-prod-subnet2", "adam-prod-subnet3"]
          address_prefix = ["14.0.1.0/24", "14.0.2.0/24", "14.0.3.0/24"]
        }

        acr = {
          name  = "digitalplanner"
          scope = "/subscriptions/5aca752c-8d85-4445-bf68-d30c9eddc5d8/resourceGroups/portfolio-develeap/providers/Microsoft.ContainerRegistry/registries/digitalplanner"
        }

        argocd_chart = {
          name      = "argocd"
          chart     = "./.terraform/modules/helm_release/charts/argocd"
          namespace = "default"
        }

        root_chart = {
          name      = "root"
          chart     = "./.terraform/modules/helm_release/charts/argocd"
          namespace = "default"
        }

        sg_name = "adam-prod-vnet-sg"

        secret = {
          name         = "azure-secret-sp"
          ClientID     = "${{ env.SECRET_CLIENT_ID }}"
          ClientSecret = "${{ env.SECRET_CLIENT_SECRET }}"
        }
        EOT

    - name: Terraform Format Check
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: terraform init -upgrade

    - name: Terraform Workspace
      run: |
        terraform workspace new prod || true
        terraform workspace select default
        terraform workspace select prod

    - name: Terraform Validate
      run: terraform validate

    - name: Current Configuration
      run: az aks get-credentials --name adam-prod --overwrite-existing --resource-group portfolio-develeap || true

    - name: Terraform Plan
      run: terraform plan -var-file prod.tfvars

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      continue-on-error: false

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file prod.tfvars

    - name: First Cleanup
      run: rm prod.tfvars
